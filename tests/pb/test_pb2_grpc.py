# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import test_pb2 as test__pb2


class GRPCTestStub(object):
  """gRpc test service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SingleMethod = channel.unary_unary(
        '/test.GRPCTest/SingleMethod',
        request_serializer=test__pb2.Request.SerializeToString,
        response_deserializer=test__pb2.Response.FromString,
        )
    self.ClientStreamingMethod = channel.stream_unary(
        '/test.GRPCTest/ClientStreamingMethod',
        request_serializer=test__pb2.Request.SerializeToString,
        response_deserializer=test__pb2.Response.FromString,
        )
    self.ServerStreamingMethod = channel.unary_stream(
        '/test.GRPCTest/ServerStreamingMethod',
        request_serializer=test__pb2.Request.SerializeToString,
        response_deserializer=test__pb2.Response.FromString,
        )
    self.BidirectionalStreamingMethod = channel.stream_stream(
        '/test.GRPCTest/BidirectionalStreamingMethod',
        request_serializer=test__pb2.Request.SerializeToString,
        response_deserializer=test__pb2.Response.FromString,
        )


class GRPCTestServicer(object):
  """gRpc test service.
  """

  def SingleMethod(self, request, context):
    """SingleMethod is unary-unary method.
    The client can only send request once, and the server can only respond once.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ClientStreamingMethod(self, request_iterator, context):
    """ClientStreamingMethod is stream-unary method.
    The client can transfer data to the server several times, but the server can only return a response once.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerStreamingMethod(self, request, context):
    """ServerStreamingMethod is unary-stream method.
    The client can only transmit data to the server at one time, but the server can return the response many times.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BidirectionalStreamingMethod(self, request_iterator, context):
    """BidirectionalStreamingMethod is stream-stream method.
    Both client and server can send and receive data to each other multiple times.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GRPCTestServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SingleMethod': grpc.unary_unary_rpc_method_handler(
          servicer.SingleMethod,
          request_deserializer=test__pb2.Request.FromString,
          response_serializer=test__pb2.Response.SerializeToString,
      ),
      'ClientStreamingMethod': grpc.stream_unary_rpc_method_handler(
          servicer.ClientStreamingMethod,
          request_deserializer=test__pb2.Request.FromString,
          response_serializer=test__pb2.Response.SerializeToString,
      ),
      'ServerStreamingMethod': grpc.unary_stream_rpc_method_handler(
          servicer.ServerStreamingMethod,
          request_deserializer=test__pb2.Request.FromString,
          response_serializer=test__pb2.Response.SerializeToString,
      ),
      'BidirectionalStreamingMethod': grpc.stream_stream_rpc_method_handler(
          servicer.BidirectionalStreamingMethod,
          request_deserializer=test__pb2.Request.FromString,
          response_serializer=test__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'test.GRPCTest', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
